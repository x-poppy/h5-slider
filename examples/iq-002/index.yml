version: 0.0.1
info:
  title: "Raven IQ Test"
  favicon: "./favicon.ico"
  description: "Raven IQ Test 002"
  contentBackground: "#f4f8fc"
  cssVariables:
security:
  knownHosts:
definitions:
  Themes:
    PrimaryColor: '#27527a'
  Permissions:
    PreviousSlide: true
  LocaleMessages:
    PreviousSlide: "Previous"
    NextSlide: "Next"
    SubmitSlide: "Submit"
    ExerciseCheersAlertMessage1: "WOW! Group 1 Completed!"
    ExerciseCheersAlertMessage2: "Amazing! Group 2 Completed!"
    ExerciseCheersAlertMessage3: "Bravo! Group 3 Completed!"
    ExerciseCheersAlertMessage4: "Awesome! Group 4 Completed!"
    ExerciseCheersAlertConfirm: "Continue"
  Components:
    CheersAlertMessageEffect:
      type: DelayEffect
      props:
        delay: 0
        overlay: false
        message: ${cheersMessage}
        confirmButtonColor: ${Themes.PrimaryColor}
        theme: round-button
        confirmButtonText: ${LocaleMessages.ExerciseCheersAlertConfirm}
    ExerciseOption:
      type: Option
      props: 
        name: ${optionId}
        checkedColor: ${Themes.PrimaryColor}
      children:
        type: FlexBox
        props:
          width: 8rem
          height: 4.5rem
          align: center
          justify: center 
        children:
          type: Padding
          props:
            padding: "0.25rem 2rem 0.25rem 0"
          children:
            type: Image
            props:
              fit: fill
              width: 100%
              src: "./assets/test/${questionId}/${optionId}.svg"
    Exercise:
      type: Slide
      definitions:
        entryEffect: null
      props:
        entryEffect: ${entryEffect}
      children:
      - type: Gap
      - type: Padding
        children:
        - type: SlideIndicator
          props:
            color: ${Themes.PrimaryColor}
        - type: Gap   
          props:
            size: sm     
        - type: FlexBox
          props:
            align: center
            justify: center
          children:
          - type: Image
            props:
              fit: fill
              height: 15rem
              src: "./assets/test/${questionId}/0.svg"
        - type: Gap
          props:
            size: sm
        - type: OptionGroup
          props:
            name: ${questionId}
            direction: horizontal
          children:
            - type: FlexBox
              props:
                align: center
                justify: center  
              children:
                type: FlexBox
                props:
                  width: 100%
                  wrap: true
                  justify: center 
                children: 
                  type: Group
                  props:
                    random: true  
                  children: ${$children} 
        - type: Gap
          props:
            size: md
        - type: ActionBar 
          props:
            autoNext: true
            preButtonStyle: 
              color: ${Themes.PrimaryColor}
            nextButtonStyle:
              color: ${Themes.PrimaryColor} 
            submitButtonStyle:
              color: ${Themes.PrimaryColor}
            nextButtonEnable: ${${questionId}}
            nextButtonDefaultEnable: false
            submitEffect:
              submitEffect:
              type: QueueEffect
              children:
              - type: WriteLocalStorageEffect
                props:
                  writeKey: 'userId'
                  writeValue: ''
                  writeType: SetNX
                  uuid: true
              - type: SubmitEffect
                props:
                  url: "http://test/api/do/test/test"
                  storeMatcher: {}
                  searchMatcher: ["userId", "templateId", "marketSource"]
                  localStorageEffectMatcher: ["userId"]
    Exercise6:
      type: ${Components.Exercise}
      children:
        - type: ${Components.ExerciseOption}
          props:
            optionId: A
        - type: ${Components.ExerciseOption}
          props:
            optionId: B
        - type: ${Components.ExerciseOption}
          props:
            optionId: C
        - type: ${Components.ExerciseOption}
          props:
            optionId: D
        - type: ${Components.ExerciseOption}
          props:
            optionId: E
        - type: ${Components.ExerciseOption}
          props:
            optionId: F
    Exercise8:
      type: ${Components.Exercise}
      children:
        - type: ${Components.ExerciseOption}
          props:
            optionId: A
        - type: ${Components.ExerciseOption}
          props:
            optionId: B
        - type: ${Components.ExerciseOption}
          props:
            optionId: C
        - type: ${Components.ExerciseOption}
          props:
            optionId: D
        - type: ${Components.ExerciseOption}
          props:
            optionId: E
        - type: ${Components.ExerciseOption}
          props:
            optionId: F
        - type: ${Components.ExerciseOption}
          props:
            optionId: G
        - type: ${Components.ExerciseOption}
          props:
            optionId: H   
type: Slider
props:
  widgets:
    - type: Module
      props:
        url: "../index/FloatingBall.yml"
children:
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_1'
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_2'
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_3'
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_4'
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_5'
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_6'
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_7'
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_8'  
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_9'
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_10'
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_11'  
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_12'  
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_13'
      entryEffect:
        type: ${Components.CheersAlertMessageEffect}
        props:
          cheersMessage: ${LocaleMessages.ExerciseCheersAlertMessage1}
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_14'   
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_15'   
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_16'   
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_17'   
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_18'   
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_19'       
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_20'
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_21'    
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_22'  
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_23' 
  - type: ${Components.Exercise6}
    props:
      questionId: 'Question_24'
  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_25'
      entryEffect:
        type: ${Components.CheersAlertMessageEffect}
        props:
          cheersMessage: ${LocaleMessages.ExerciseCheersAlertMessage2}    
  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_26'  
  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_27'   

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_28'   

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_29'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_30'   
           
  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_31'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_32'       

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_33'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_34'          

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_35'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_36'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_37'
      entryEffect:
        type: ${Components.CheersAlertMessageEffect}
        props:
          cheersMessage: ${LocaleMessages.ExerciseCheersAlertMessage3}
  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_38'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_39'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_40'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_41'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_42'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_43'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_44'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_45'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_46'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_47'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_48'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_49'
      entryEffect:
        type: ${Components.CheersAlertMessageEffect}
        props:
          cheersMessage: ${LocaleMessages.ExerciseCheersAlertMessage4}
  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_50'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_51'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_52'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_53'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_54'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_55'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_56' 

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_57'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_58'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_59'

  - type: ${Components.Exercise8}
    props:
      questionId: 'Question_60'                                                                                                                           
